# {{ item.org }}: {{ item.name }} (Root CA)



# Default settings
# ===========================

[ default ]
ca                      = {{ item.org }}-{{ item.name }}.ca       # CA name
dir                     = $ENV::PKICTL_CA_DIR       # Top dir
base_url                = {{ org[item.org]["base_url"] }}    # CA base URL
aia_url                 = $base_url/$ca.crt         # CA certificate URL
crl_url                 = $base_url/$ca.crl         # CRL distribution point
ocsp_url                = $base_url/ocsp            # OCSP service location
name_opt                = multiline,-esc_msb,utf8   # Display UTF-8 characters



# CA request settings
# ===========================

[ req ]
utf8                    = yes                       # Input is UTF-8
string_mask             = utf8only                  # Emit UTF-8 strings
distinguished_name      = s_rootca_dn                     # DN section
req_extensions          = s_rootca_reqext                 # Desired extensions
{% for key,value in item.req_config.iteritems() %}
{{ key }} = {{ value }}
{% endfor %}


# CA DN
# ---------------------------
[ s_rootca_dn ]
{% for key,value in item.req_dn.iteritems() %}
{{ key }} = {{ value }}
{% endfor %}


# CA Requested extensions
# ---------------------------
[ s_rootca_reqext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
{% for key,value in item.req_ext.iteritems() %}
{{ key }} = {{ value }}
{% endfor %}



# CA operational settings
# ===========================

[ ca ]
default_ca              = root_ca                   # The default CA section

[ root_ca ]
certificate             = $dir/$ca/$ca.crt          # The CA cert
private_key             = $dir/$ca/private/$ca.key  # CA private key
new_certs_dir           = $dir/$ca/certs            # Certificate archive
serial                  = $dir/$ca/db/$ca.crt.srl   # Serial number file
crlnumber               = $dir/$ca/db/$ca.crl.srl   # CRL number file
database                = $dir/$ca/db/$ca.db        # Index file
unique_subject          = no                        # Require unique subject
default_days            = 10950                     # How long to certify for
default_md              = sha256                    # MD to use
policy                  = s_policy_match            # Default naming policy
email_in_dn             = no                        # Add email to cert DN
preserve                = no                        # Keep passed DN ordering
name_opt                = $name_opt                 # Subject DN display options
cert_opt                = ca_default                # Certificate display options
copy_extensions         = none                      # Copy extensions from CSR
x509_extensions         = s_intermediate_ca_ext     # Default cert extensions
default_crl_days        = 30                        # How long before next CRL
crl_extensions          = s_crl_ext                 # CRL extensions
{% for key,value in item.ca_config.iteritems() %}
{{ key }} = {{ value }}
{% endfor %}


# CA Policy match
# ---------------------------

[ s_policy_match ]
{% for key,value in item.ca_policy_match.iteritems() %}
{{ key }} = {{ value }}
{% endfor %}
# Should be in template below ....
countryName             = match
stateOrProvinceName     = optional
localityName            = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied

# Not used ...
#[ policy_anything ]
#countryName             = optional
#stateOrProvinceName     = optional
#localityName            = optional
#organizationName        = optional
#organizationalUnitName  = optional
#commonName              = optional
#emailAddress            = optional
#domainComponent         = optional


# CA Extensions
# ---------------------------

[ root_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always

[ s_intermediate_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true,pathlen:1
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @s_issuer_info
crlDistributionPoints   = @s_crl_info
{% for key,value in item.ca_sign_ext.iteritems() %}
{{ key }} = {{ value }}
{% endfor %}

[ s_crl_ext ]
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @s_issuer_info

[ s_issuer_info ]
caIssuers;URI.0         = $aia_url
OCSP;URI.0              = $ocsp_url

[ s_crl_info ]
URI.0                   = $crl_url

